import { defineStore } from 'pinia';
import { computed } from 'vue';
import { useResource } from '~/composables/useResource';
import {
  fetchCards,
  fetchCardDetails,
  orderCards
} from '~/composables/api/cards/cardsApi';
import {
  fetchAccounts,
  orderAccounts
} from '~/composables/api/accounts/accountsApi';
import type {
  OrderPayload
} from '~/types/cards-accounts';

export const useCardsAccountsStore = defineStore('cards-accounts', () => {
  // --- Cards Resource ---
  const {
    items: cards,
    loading: cardLoading,
    error: cardError,
    loadItems: loadCards,
    detail: selectedCard,
    detailLoading: cardDetailsLoading,
    detailError: cardDetailsError,
    loadDetail: loadCardDetails
  } = useResource({
    fetchList: fetchCards,
    extractList: res => res.cards,
    fetchDetail: fetchCardDetails,
  });

  function sortCards(payload: OrderPayload[]) {
    return orderCards(payload);
  }

  // --- Accounts Resource ---
  const {
    items: accounts,
    loading: accountLoading,
    error: accountError,
    loadItems: loadAccounts
  } = useResource({
    fetchList: fetchAccounts,
    extractList: res => res.accounts
  });

  function sortAccounts(payload: OrderPayload[]) {
    return orderAccounts(payload);
  }

  // --- Combined ---
  const loading = computed(() => cardLoading.value || accountLoading.value);
  const error = computed(() => cardError.value || accountError.value);

  async function fetchUserFinancialData() {
    await Promise.all([loadCards(), loadAccounts()]);
  }


  return {
    // state
    cards,
    accounts,
    selectedCard,

    // status flags
    cardLoading,
    cardError,
    accountLoading,
    accountError,
    loading,
    error,
    cardDetailsLoading,
    cardDetailsError,

    // actions
    loadCards,
    loadAccounts,
    loadCardDetails,
    fetchUserFinancialData,
    sortCards,
    sortAccounts
  };
});
